/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mailclient;


import java.awt.Color;



import java.awt.Toolkit;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileNotFoundException;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.swing.DefaultListModel;

import javax.swing.JFileChooser;


import javax.swing.JOptionPane;



import javax.swing.table.DefaultTableModel;


import javax.swing.text.Document;

import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;
import sun.misc.BASE64Decoder;

/**
 *
 * @author ThanhHung
 */
public class mainClient extends javax.swing.JFrame {

    /**
     * Creates new form mainClient
     */
    
     public String ImapHost,ImapPort,SmtpHost,SmtpPort;
     public String userEmail, userPassword;
     
    Store store; //store lưu trữ mail
    Folder[] folders; 
    Folder Inboxfolder; //hộp thư đến
    Folder folder;
    Part curPart;
    String curText;
    Part[] parts = new Part[100]; //mảng Part[] chứa parts đính kèm để tải về
    int countAtt = 0; //số lượng file đính kèm
    String curFilename;
    DefaultListModel listModel1 = new DefaultListModel(); //list model của listbox lbAtt - File đính kèm
    accForm af; //Form thiết lập tài khoản
    Account account;  //account đang đăng nhập
    DefaultListModel listModel = new DefaultListModel(); //list model của listbox Folder - Hộp thư
    DefaultTableModel tbModel;  //table model của tablesubject - header thư 
    String messageForward; //nội dung thư đính kèm
    boolean isSignouted = false;
   
    public mainClient() {
        
        initComponents();
        
        
        setIcon();
        khoitao();
        //btnDownload.setEnabled(false);
         lbFolder.setModel(listModel);
        
        
        HTMLEditorKit kit = new HTMLEditorKit();
        epContent.setEditorKit(kit);
            //thiết lập style cho eEditor pane - chứa nội dung thư
            StyleSheet styleSheet = kit.getStyleSheet();
            styleSheet.addRule("body {color:#000; font-family:times; margin: 4px; }");
            styleSheet.addRule("h1 {color: blue;}");
            styleSheet.addRule("h2 {color: #ff0000;}");
            styleSheet.addRule("pre {font : 10px monaco; color : black; background-color : #fafafa; }");
            Document doc = kit.createDefaultDocument();
            epContent.setDocument(doc);
            
             tbModel = (DefaultTableModel) tabSubject.getModel();  
             
             
            
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lbFolder = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabSubject = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        epContent = new javax.swing.JEditorPane();
        btGetMail = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        lbAttach = new javax.swing.JList();
        lblattach = new javax.swing.JLabel();
        btnDownload = new javax.swing.JButton();
        lbStatus = new javax.swing.JLabel();
        btWriteMail = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btReply = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btForward = new javax.swing.JButton();
        btSignout = new javax.swing.JButton();
        btRefresh = new javax.swing.JButton();
        btSeen = new javax.swing.JButton();
        btDecrypt = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        lbEmail = new javax.swing.JLabel();
        btConfig = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lbMessCount = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbNewMess = new javax.swing.JLabel();
        btDownmail = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jOfflinemode = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OFEN Mail");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lbFolder.setBorder(javax.swing.BorderFactory.createTitledBorder("Hộp thư"));
        lbFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbFolderMouseClicked(evt);
            }
        });
        lbFolder.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lbFolderValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lbFolder);

        tabSubject.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "*", "Người gửi", "Chủ đề", "Ngày gửi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabSubject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabSubjectMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabSubject);
        if (tabSubject.getColumnModel().getColumnCount() > 0) {
            tabSubject.getColumnModel().getColumn(0).setMinWidth(20);
            tabSubject.getColumnModel().getColumn(0).setPreferredWidth(20);
            tabSubject.getColumnModel().getColumn(0).setMaxWidth(20);
            tabSubject.getColumnModel().getColumn(1).setPreferredWidth(100);
            tabSubject.getColumnModel().getColumn(2).setPreferredWidth(200);
            tabSubject.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Nội dung thư"));

        epContent.setEditable(false);
        epContent.setContentType("text/html"); // NOI18N
        epContent.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        epContent.setText("\n");
        epContent.setAutoscrolls(false);
        jScrollPane3.setViewportView(epContent);

        btGetMail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/mail_receive.png"))); // NOI18N
        btGetMail.setText("Nhận mail");
        btGetMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGetMailActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(lbAttach);

        lblattach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/attachment.png"))); // NOI18N
        lblattach.setText("File đính kèm:");

        btnDownload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/downloadatt.png"))); // NOI18N
        btnDownload.setText("Tải về");
        btnDownload.setEnabled(false);
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });

        lbStatus.setText("_");

        btWriteMail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/mail_send.png"))); // NOI18N
        btWriteMail.setText("Soạn thư");
        btWriteMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btWriteMailActionPerformed(evt);
            }
        });

        jLabel1.setText("Message:");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btReply.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/3348_3816_mail-reply-sender_32x32.png"))); // NOI18N
        btReply.setText("Trả lời");
        btReply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btReplyActionPerformed(evt);
            }
        });

        btDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/delete.png"))); // NOI18N
        btDelete.setText("Xóa thư");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/email-icon.gif"))); // NOI18N
        btForward.setText("Chuyển tiếp");
        btForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btForwardActionPerformed(evt);
            }
        });

        btSignout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/images.png"))); // NOI18N
        btSignout.setText("Đăng xuất");
        btSignout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSignoutActionPerformed(evt);
            }
        });

        btRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/refresh.png"))); // NOI18N
        btRefresh.setText("Làm mới");
        btRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRefreshActionPerformed(evt);
            }
        });

        btSeen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/mail_unread.png"))); // NOI18N
        btSeen.setText("Đánh dấu chưa đọc");
        btSeen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSeenActionPerformed(evt);
            }
        });

        btDecrypt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/unlock.png"))); // NOI18N
        btDecrypt.setText("Giải mã email");
        btDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDecryptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btDecrypt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btSeen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btSignout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btReply, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btForward, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btReply, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btSeen, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btDelete)
                .addGap(18, 18, 18)
                .addComponent(btForward, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btDecrypt)
                .addGap(18, 18, 18)
                .addComponent(btSignout, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane5.setBorder(null);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        lbEmail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/user.png"))); // NOI18N
        lbEmail.setText("Mời bạn thiết lập tài khoản trước khi nhận Mail!");
        jScrollPane5.setViewportView(lbEmail);

        btConfig.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/process.png"))); // NOI18N
        btConfig.setText("Thiết lập tài khoản");
        btConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfigActionPerformed(evt);
            }
        });

        jLabel2.setText("Tổng số thư:");

        lbMessCount.setText("0");

        jLabel3.setText("Thư chưa đọc: ");

        lbNewMess.setText("0");

        btDownmail.setText("Tải hộp thư");
        btDownmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDownmailActionPerformed(evt);
            }
        });

        jOfflinemode.setText("Menu");

        jMenuItem1.setText("Chế độ Offline");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jOfflinemode.add(jMenuItem1);

        jMenuItem2.setText("Giúp đỡ");
        jOfflinemode.add(jMenuItem2);

        jMenuItem3.setText("Giới thiệu");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jOfflinemode.add(jMenuItem3);

        jMenuBar1.add(jOfflinemode);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3)
                                    .addComponent(jScrollPane4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblattach)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btDownmail, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(22, 22, 22)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btWriteMail, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(jScrollPane2))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btGetMail, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 35, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbMessCount)
                                        .addGap(88, 88, 88)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbNewMess)
                                        .addGap(84, 84, 84)
                                        .addComponent(btConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbStatus))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btGetMail)
                            .addComponent(btWriteMail, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lbMessCount)
                            .addComponent(jLabel3)
                            .addComponent(lbNewMess))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btDownmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblattach)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public Account getAccount() //lấy account đang đăng nhập hiện tại
    {
        return account;
    }
    
    private void btGetMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGetMailActionPerformed
        
        //lam sach listbox vs table
        
        listModel.removeAllElements();
        
        int rowCount = tbModel.getRowCount();
        for (int i = rowCount-1;i>=0;i--)
        {
            tbModel.removeRow(i);
        }
        tabSubject.setModel(tbModel);
        //
        epContent.setText("");
        
        if ((af == null)||(af.email=="")||(isSignouted)) // kiểm tra đã thiết lập tài khoản hay đã đăng xuất
        {
            statusErr("Bạn chưa nhập thông tin tài khoản!");
            JOptionPane.showMessageDialog(null,"Chưa nhập thông tin tài khoản","Lỗi tài khoản", 0);
            btConfig.setEnabled(true);
        }
        else {
        account = af.getAccount();
        //lấy thông tin tài khoản
        userEmail = account.getEmail();
        userPassword = account.getPassword();
        ImapHost = account.getImapHost();
        ImapPort = account.getImapPort();
        SmtpHost = account.getSmtpHost();
        SmtpPort = account.getSmtpPort();
        epContent.setContentType("text/html");
        epContent.setEditable(false);
        
        thietlapNhanMail(); 
        
        
        }
    }//GEN-LAST:event_btGetMailActionPerformed

    private void lbFolderValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lbFolderValueChanged
        // TODO add your handling code here:
        //System.out.println("Heeeeeee");
    }//GEN-LAST:event_lbFolderValueChanged
    
    //xử lý sự kiện kích vào tên folder
    private void lbFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbFolderMouseClicked
        // TODO add your handling code here:
        getHeaderMail(); //gọi thủ tục lấy header thư
    }//GEN-LAST:event_lbFolderMouseClicked

    private void tabSubjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabSubjectMouseClicked
        // TODO add your handling code here: xử lý sk kích vào tiêu đề thư
        //khởi tạo
        countAtt = 0;
        listModel1.removeAllElements();
        lbAttach.setModel(listModel1);
        btDecrypt.setEnabled(true);
        btnDownload.setEnabled(false);
        btDelete.setEnabled(true);
        btForward.setEnabled(true);
        btReply.setEnabled(true);
        btSeen.setEnabled(true);
        curText = "";
        int index;
        try {
            statusProccess("Đang tải mail...");
            
            Folder folder;
            if (lbFolder.getSelectedIndex()<0) folder = folders[0]; 
            else
            folder = folders[lbFolder.getSelectedIndex()]; //lấy folder đã chọn
            Message[] mss = folder.getMessages(); //lấy tất cả thư trong folder
            index = tabSubject.getSelectedRow();
            Message ms = mss[tabSubject.getSelectedRow()]; //lấy thư chọn
            String textms=null;
            
            Object content = ms.getContent();
            if (content instanceof InputStream)
            {
                InputStream in = (InputStream) content;
                int c;
                while ((c=in.read())!=-1)
                {
                    textms+=c;
                }
                printTextms(textms);
            }
            
            if (content instanceof Multipart)
            {
                processMultipart((Multipart) content);
            }
            else 
            {
                processPart(ms);
            }
            statusOK("Tải mail thành công!");
            ms.setFlag(Flags.Flag.SEEN, true);
            tabSubject.getModel().setValueAt("", index, 0);
            lbNewMess.setText(Integer.toString(folder.getUnreadMessageCount()));
        } catch (MessagingException ex) {
            statusErr("Lỗi MessagingException");
            JOptionPane.showMessageDialog(null, ex, "Lỗi", 0);
        } catch (IOException ex) {
             statusErr("Xuất hiện lỗi phần mềm...");
             
        }
        
    }//GEN-LAST:event_tabSubjectMouseClicked
//sự kiện tải file
    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        //gọi hàm lưu file để tải file đính kèm về, 
        luufile(lbAttach.getSelectedValue().toString(), parts[lbAttach.getSelectedIndex()]);
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        AboutForm ab = new AboutForm();
        ab.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void btWriteMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btWriteMailActionPerformed
        // TODO add your handling code here: gửi mail
        sendMail sm = new sendMail(userEmail, userPassword, "", "","", SmtpHost, SmtpPort);
        
        sm.setVisible(true);
    }//GEN-LAST:event_btWriteMailActionPerformed

    private void btReplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReplyActionPerformed
        // TODO add your handling code here: reply
        try {
            //chọn thư cần reply
        Folder folder = folders[lbFolder.getSelectedIndex()];
        Message[] mss;
        mss = folder.getMessages();
        Message ms = mss[tabSubject.getSelectedRow()];
        
        String from = "";
        InternetAddress[] addresses = (InternetAddress[]) ms.getFrom();
        for (InternetAddress address : addresses)
        {
            from += address.getAddress();
        }
         //gọi form gửi mail với những tham số cần thiết   
        sendMail sm = new sendMail(userEmail,userPassword,from,"Rep: "+ms.getSubject(),"",SmtpHost,SmtpPort);
        sm.setVisible(true);
        ms.setFlag(Flags.Flag.ANSWERED, true); //đánh dấu là mail nãy đã đc trả lời
        } catch (Exception ex)
        {
            statusErr("Lỗi trả lời thư...!");
            JOptionPane.showMessageDialog(null, "Lỗi trả lời thư! "+ex, "Lỗi", 0);
        }
    }//GEN-LAST:event_btReplyActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        // TODO add your handling code here: thao tac xoa mail
        try {
            
        Folder folder = folders[lbFolder.getSelectedIndex()];
        Message[] mss;
        mss = folder.getMessages();
         
        epContent.setText("");
        if (JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa thư này?")==JOptionPane.YES_OPTION)
        {
            Message ms = mss[tabSubject.getSelectedRow()];
            ms.setFlag(Flags.Flag.DELETED, true);//đánh dấu xóa mail
            //folder.expunge();
            folder.close(true);
            listModel.removeAllElements(); 
           //xóa thư xog ta thực hiện việc refresh mail client
            thietlapNhanMail();
            getHeaderMail();
            statusOK("Xóa mail thành công!");
            lbMessCount.setText(Integer.toString(folder.getMessageCount()));
            lbNewMess.setText(Integer.toString(folder.getUnreadMessageCount()));
        }
        } catch (MessagingException ex) {
             Logger.getLogger(mainClient.class.getName()).log(Level.SEVERE, null, ex);
             statusErr("Lỗi xóa mail!");
         }
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btSignoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSignoutActionPerformed
         try {
             // TODO add your handling code here: thao tac dang xuat
             Inboxfolder.close(false); 
             store.close();
             khoitao();
             int rowCount = tbModel.getRowCount();
            for (int i = rowCount-1;i>=0;i--)
            {
                tbModel.removeRow(i);
            }
            tabSubject.setModel(tbModel);
             statusOK("Đăng xuất thành công!");
             JOptionPane.showMessageDialog(null,"Đăng xuất thành công!","Thông báo", 1);
             lbEmail.setText("Chào mừng bạn đến với OFEN Mail!");
             btConfig.setEnabled(true);
             isSignouted =  true;
             //btGetMail.setEnabled(false);
         } catch (MessagingException ex) {
             Logger.getLogger(mainClient.class.getName()).log(Level.SEVERE, null, ex);
             statusErr("Đăng xuất không thành công!");
             JOptionPane.showMessageDialog(null, ex, "Lỗi", 0);
         }
        
    }//GEN-LAST:event_btSignoutActionPerformed

    private void btRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRefreshActionPerformed
        // TODO add your handling code here: làm mới
        epContent.setText("");
        thietlapNhanMail();
        lbFolder.setSelectedIndex(0);
        int rowCount = tbModel.getRowCount();
        for (int i = rowCount-1;i>=0;i--)
        {
            tbModel.removeRow(i);
        }
        tabSubject.setModel(tbModel);
        try
        {
        Folder folder = folders[0];
        Message[] mss = folder.getMessages();
        
        lbMessCount.setText(Integer.toString(folder.getMessageCount()));
        lbNewMess.setText(Integer.toString(folder.getUnreadMessageCount()));
            
        for (Message ms : mss)
	{
            //if (!ms.getFlags().contains(Flags.Flag.DELETED))
            {
            String from = "";
            InternetAddress[] addresses = (InternetAddress[]) ms.getFrom();
            for (InternetAddress address : addresses)
            {
                from += address.getAddress();
            }
            
            String sub = ms.getSubject();
            Date senD = ms.getSentDate();
            
            String notSeen = "*";
            if (ms.getFlags().contains(Flags.Flag.SEEN))
                notSeen = "";
            else notSeen = "*";
           tbModel.addRow(new Object[]{notSeen,from,sub,senD});
           //
           
           //
            }
        }
        tabSubject.setModel(tbModel);
        }
        catch (Exception ex)
        {
            statusErr("Lỗi!" + ex);
        }
    }//GEN-LAST:event_btRefreshActionPerformed

    private void btForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btForwardActionPerformed
        // TODO add your handling code here:
        try {
        Folder folder = folders[lbFolder.getSelectedIndex()];
        Message[] mss;
        mss = folder.getMessages();
        Message ms = mss[tabSubject.getSelectedRow()];
        
        String from = "";
        InternetAddress[] addresses = (InternetAddress[]) ms.getFrom();
        for (InternetAddress address : addresses)
        {
            from += address.getAddress();
        }
            
        sendMail sm = new sendMail(userEmail,userPassword,"","Forward: "+ms.getSubject(),messageForward,SmtpHost,SmtpPort);
        sm.setVisible(true);
        ms.setFlag(Flags.Flag.ANSWERED, true);
        } catch (Exception ex)
        {
            statusErr("Lỗi trả lời thư...!");
            JOptionPane.showMessageDialog(null, "Lỗi trả lời thư! "+ex, "Lỗi", 0);
        }
    }//GEN-LAST:event_btForwardActionPerformed

    private void btConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfigActionPerformed
        // TODO add your handling code here: thiết lập tài khoản
        af = new accForm();
        af.setVisible(true);
        isSignouted = false;
        //if (!af.isVisible())
        //{
          //  if (af.isFill())
           //     btGetMail.setEnabled(true);
        //}
    }//GEN-LAST:event_btConfigActionPerformed

    private void btSeenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSeenActionPerformed
         try {
             // TODO add your handling code here:
             Folder folder = folders[lbFolder.getSelectedIndex()];
             Message[] mss;
             mss = folder.getMessages();
             Message ms = mss[tabSubject.getSelectedRow()];
             
             ms.setFlag(Flags.Flag.SEEN, false);
             tabSubject.getModel().setValueAt("*", tabSubject.getSelectedRow(), 0);
             lbNewMess.setText(Integer.toString(folder.getUnreadMessageCount()));
         } catch (MessagingException ex) {
             Logger.getLogger(mainClient.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(null, "Lỗi: "+ex, "Lỗi", 0);
         }
    }//GEN-LAST:event_btSeenActionPerformed

    private void btDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDecryptActionPerformed
         
         String noidung = epContent.getText();
         String desKey = "";
         {
             try {
                 
                 desKey = JOptionPane.showInputDialog("Mời bạn nhập key để mã hóa (độ dài key = 16)");
                 if (desKey.length() != 16)
                 {
                     JOptionPane.showMessageDialog(null, "Giải mã không thành công!Bạn phải nhập key có 16 kí tự","Cảnh báo",2);
                     return;
                 }
                 noidung = EncryptorDecryptor.decrypt(curText, desKey);
                 JOptionPane.showMessageDialog(null, "Giải mã thành công!","Thông báo",1);
                 statusOK("Giải mã thành công!");
             } catch (Exception ex) {
                 Logger.getLogger(mainClient.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(null, "Giải mã không thành công! Key không đúng","Cảnh báo",2);
             }
             
         }
         epContent.setText(noidung);
    }//GEN-LAST:event_btDecryptActionPerformed

    private void btDownmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDownmailActionPerformed
         try {
             // TODO add your handling code here: Tải thư về máy
             statusProccess("Đang tiến hành tải toàn bộ thư về máy tính!");
             File dir = new File("src/dat/"+userEmail);
             dir.mkdirs();
             ioObject.writeObject(userEmail+"/account.dat", account);
             Message[] mss = Inboxfolder.getMessages();
             for (int i=0;i<mss.length;i++)
             {
                 
                 File f = new File("src/dat/"+userEmail+"/"+i+".msg");
                 if (f.exists())
                     continue;
                OutputStream os = new FileOutputStream(f);
                mss[i].writeTo(os);
                
                os.close();
                
             }
             statusOK("Tải thư  về máy tính thành công!");
             JOptionPane.showMessageDialog(null, "Thư đã được lưu tại thư mục src/dat/", "Thông báo", 1);
         } catch (MessagingException ex) {
             Logger.getLogger(mainClient.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(null, "Lỗi:"+ex, "Lỗi", 0);
         } catch (FileNotFoundException ex) {
             Logger.getLogger(mainClient.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(null, "Lỗi: Không tìm thấy File! ", "Lỗi", 0);
         } catch (IOException ex) {
             Logger.getLogger(mainClient.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(null, "Lỗi:"+ex, "Lỗi", 0);
         }
        
    }//GEN-LAST:event_btDownmailActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null,"Chế độ Offline dùng để đọc mail đã được tải về máy từ trước đó khi không có kết nối Internet!");
        mailOffline mOffline = new mailOffline();
        mOffline.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainClient().setVisible(true);
             
            }
        });
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConfig;
    private javax.swing.JButton btDecrypt;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btDownmail;
    private javax.swing.JButton btForward;
    private javax.swing.JButton btGetMail;
    private javax.swing.JButton btRefresh;
    private javax.swing.JButton btReply;
    private javax.swing.JButton btSeen;
    private javax.swing.JButton btSignout;
    private javax.swing.JButton btWriteMail;
    private javax.swing.JButton btnDownload;
    private javax.swing.JEditorPane epContent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenu jOfflinemode;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JList lbAttach;
    private javax.swing.JLabel lbEmail;
    private javax.swing.JList lbFolder;
    private javax.swing.JLabel lbMessCount;
    private javax.swing.JLabel lbNewMess;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JLabel lblattach;
    private javax.swing.JTable tabSubject;
    // End of variables declaration//GEN-END:variables

    private void khoitao() //khỏi tạo form ban đầu
    {
        btRefresh.setEnabled(false);
        btDelete.setEnabled(false);
        btForward.setEnabled(false);
        btReply.setEnabled(false);
        btWriteMail.setEnabled(false);
        listModel.removeAllElements();
        listModel1.removeAllElements();
        epContent.removeAll();
        epContent.setText("");
        btSeen.setEnabled(false);
        btDecrypt.setEnabled(false);
        //btGetMail.setEnabled(false);
    }
    
    public void processMultipart(Multipart mp) throws MessagingException, IOException { //xử lý multipart
        int count = mp.getCount();
        for (int i=0;i<count;i++)
        {
            processPart(mp.getBodyPart(i));
        }
        }

    
    
    private void processPart(Part p) throws IOException, MessagingException { //xu ly part mail
        String fileName = p.getFileName(); //lấy tên file đính kèm
        if (fileName!=null)
        if (fileName.contains("?")) //nếu tên file thuộc định dạng khác
        {
            String ff = fileName.substring(10);
            ff = ff.replace("?","");
            ff = ff.replace("=", "");
            fileName = ff;
        }
        String disposition = p.getDisposition(); //lấy đính kèm
        
        if (Part.ATTACHMENT.equalsIgnoreCase(disposition)) //nếu có file đính kèm?
        {
            if (fileName==null) fileName = "data.txt";
            listModel1.addElement(fileName);
            
            lbAttach.setModel(listModel1);
            curFilename = fileName;
            curPart = p;
            btnDownload.setEnabled(true);
            //luufile(fileName,p);
            
            parts[countAtt] = p;
            countAtt++;
        }
        else
        {
         Object content = p.getContent();
         if (content instanceof Multipart)
         {
             processMultipart((Multipart) content);
         }
         else if (content instanceof String)
         {
         String textms="";
         
         //if (content instanceof String)
            //{
                textms+=content;
            //}
           // else 
           
           messageForward = textms; 
           curText = textms;
            printTextms(textms);
         }
    }
    }

    private void luufile(String fileName,Part p)  {
        try{
            //chọn file để lưu file đính kèm
        JFileChooser fc = new JFileChooser();
        fc.setSelectedFile(new File(fileName));
        if (fc.showSaveDialog(fc)==JFileChooser.APPROVE_OPTION)
        {
        File f = fc.getSelectedFile();
            for (int i=0;f.exists();i++)
            {
                f = new File(fc.getCurrentDirectory()+""+i);
            }
            
         if (ImapHost.contains("pop")) {//truyền file đính kèm từ mail về máy sử dụng POP3 
        
         FileOutputStream out = new FileOutputStream(f);
        InputStream in = new BufferedInputStream(p.getInputStream());
        byte buffer[] = new byte[in.available()];
        in.read(buffer);
        out.write(buffer);
        out.flush();
        out.close();
        in.close();//
         }
         else if (ImapHost.contains("imap")) 
            
            //Lưu file đính kèm về máy imap
         {
             MimeBodyPart part = (MimeBodyPart) p;
             part.saveFile(f);
             
         }
        statusOK("Lưu file thành công!");
        JOptionPane.showMessageDialog(null, "Lưu file thành công!","Thông báo",1);
        }
        } catch(Exception ex)
        {
            statusErr("Lỗi lưu file");
        }
    }

    private void printTextms(String textms) { //xuat noi dung text cua mail
         if (textms.contains("<head"))
                textms = textms.substring(textms.indexOf("<body"),textms.indexOf("</body>"));
            
            
            epContent.setText(textms);
            
           // System.out.println(textms);
    }

    private void statusErr(String mess) {
      lbStatus.setForeground(Color.RED);
      lbStatus.setText(mess);
    }
    
    private void statusOK(String mess)
    {
        lbStatus.setForeground(Color.BLUE);
        lbStatus.setText(mess);
    }

    private void statusProccess(String mess)
    {
        lbStatus.setForeground(Color.ORANGE);
        lbStatus.setText(mess);
    }
    private void initFolders(Folder[] folders) {
        
    }
    
    private void thietlapNhanMail() 
    {
     try {
            
            statusProccess("Đang đăng nhập tới tài khoản "+userEmail);
            Properties pro = af.getProperties();
            
            Session ss = Session.getDefaultInstance(pro, new javax.mail.Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication()
                {
                    return new PasswordAuthentication(userEmail, userPassword);
                }
            });
           
            store = null;			
            store = ss.getStore();
            store.connect(userEmail,userPassword);
            
          
            folders = store.getDefaultFolder().list("*");
            
            if (folders!=null)
            {
              
            statusOK("Đăng nhập thành công tới tài khoản  "+userEmail);
            btConfig.setEnabled(false);
            lbEmail.setText("Xin chào "+userEmail);
            
            //initFolders(folders);
            listModel.removeAllElements();
            for (Folder folder : folders) 
            {
		if(!folder.isOpen()) 
                {
                    //if (folder.getFullName()=="INBOX") {
                    //folder.open(Folder.READ_WRITE);}
                    
                    if (folder.getFullName().contains("INBOX"))
                    {
                        Inboxfolder = folder;
                        
                        folder.open(Folder.READ_WRITE);
                    }
                    
		}
		//System.out.println(" #["+folder.getFullName()+"]");
                if (folder.getFullName().contains("INBOX"))
                listModel.addElement(folder.getFullName()+"("+folder.getUnreadMessageCount()+")");
                //else 
                    //listModel.addElement(folder.getFullName());
            }
            
            //Enable cac button
            btRefresh.setEnabled(true);
            btWriteMail.setEnabled(true);
            
            
            }
            else
            {
                statusErr("Không mở được hộp thư!");
            }
            
        }
        catch(Exception ex)
        {
            lbStatus.setForeground(Color.RED);
            lbStatus.setText("Đăng nhập không thành công!");
            JOptionPane.showMessageDialog(null, ex, "Lỗi",0);
            btConfig.setEnabled(true);
        }   
    }
    
    private void getHeaderMail() //lay thong tin cua mail
    {
        //làm trống table tiêu đề
        int rowCount = tbModel.getRowCount();
        for (int i = rowCount-1;i>=0;i--)
        {
            tbModel.removeRow(i);
        }
        tabSubject.setModel(tbModel);
        try
        {
        Folder folder = folders[lbFolder.getSelectedIndex()];
        Message[] mss = folder.getMessages();
        lbMessCount.setText(Integer.toString(folder.getMessageCount()));
        lbNewMess.setText(Integer.toString(folder.getUnreadMessageCount()));
        for (Message ms : mss)
	{
            //if (!ms.getFlags().contains(Flags.Flag.DELETED))
            {
            String from = "";
            InternetAddress[] addresses = (InternetAddress[]) ms.getFrom();
            for (InternetAddress address : addresses)
            {
                
                from += address.getAddress();
            }
            
            String sub = ms.getSubject();
            
            Date senD = ms.getSentDate();
            
            String notSeen = "*";
            if (ms.getFlags().contains(Flags.Flag.SEEN))
                notSeen = "";
            else notSeen = "*";
           tbModel.addRow(new Object[]{notSeen,from,sub,senD});
           //
           
           //
            }
        }
        tabSubject.setModel(tbModel);
        
        
        }
        catch (Exception ex)
        {
            statusErr("Lỗi!" + ex);
        }
    }

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icon/mailm.png")));
    }
    
   
}

